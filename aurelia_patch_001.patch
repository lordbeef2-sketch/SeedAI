diff --git a/Start-Aurelia.bat b/Start-Aurelia.bat
new file mode 100644
index 0000000..b8f7f8f
--- /dev/null
+++ b/Start-Aurelia.bat
@@ -0,0 +1,6 @@
+@echo off
+REM One-click launcher: backend (8090) + frontend (5173) + open browser
+setlocal
+powershell -NoProfile -ExecutionPolicy Bypass -File "%~dp0Start-Aurelia.ps1" -OpenBrowser -BackendNewWindow -FrontendNewWindow
+endlocal
+exit /b 0
diff --git a/Start-Aurelia.ps1 b/Start-Aurelia.ps1
new file mode 100644
index 0000000..e3b0c1a
--- /dev/null
+++ b/Start-Aurelia.ps1
@@ -0,0 +1,259 @@
+<#  Start-Aurelia.ps1
+    Bootstrap + launch Aurelia (backend 8090 + frontend 5173)
+
+    Usage (from repo root):
+      powershell -NoProfile -ExecutionPolicy Bypass -File .\Start-Aurelia.ps1
+      # Options:
+      #   -SkipOllama            -> don't start/verify ollama
+      #   -BackendNewWindow      -> run backend in a new window
+      #   -FrontendNewWindow     -> run frontend in a new window
+      #   -OpenBrowser           -> open http://localhost:5173
+#>
+
+param(
+  [switch]$SkipOllama,
+  [switch]$BackendNewWindow,
+  [switch]$FrontendNewWindow,
+  [switch]$OpenBrowser
+)
+
+$ErrorActionPreference = "Stop"
+
+# --- Paths ---------------------------------------------------------------
+$RepoRoot      = Split-Path -Path $PSCommandPath -Parent
+Set-Location $RepoRoot
+
+$MemoryDir     = Join-Path $RepoRoot "memory"
+$LogsDir       = Join-Path $RepoRoot "logs"
+$CoreJson      = Join-Path $MemoryDir "core.json"
+
+$FrontendDir   = Join-Path $RepoRoot "openweb-ui-frontend"
+
+# --- Helpers -------------------------------------------------------------
+function Ensure-Dir($p) {
+  if (-not (Test-Path $p)) { New-Item -ItemType Directory -Path $p | Out-Null }
+}
+
+function Backup-OldMemory {
+  Ensure-Dir $MemoryDir
+  $stamp = Get-Date -Format "yyyyMMdd-HHmmss"
+  $archiveDir = Join-Path $MemoryDir ("_archive-" + $stamp)
+  Ensure-Dir $archiveDir
+  $toMove = @("comfort.json","identity.json","imprint.json","memory.db","settings.db")
+  foreach ($n in $toMove) {
+    $fp = Join-Path $MemoryDir $n
+    if (Test-Path $fp) {
+      Move-Item $fp (Join-Path $archiveDir $n)
+    }
+  }
+  Write-Host "Archived old memory files to $archiveDir"
+}
+
+function New-CoreJson {
+  if (Test-Path $CoreJson) { Write-Host "core.json already exists â†’ leaving as-is."; return }
+  $obj = [ordered]@{
+    meta = [ordered]@{
+      version    = "1.0"
+      created_at = (Get-Date).ToString("o")
+      last_boot  = (Get-Date).ToString("o")
+      note       = "Seed memory file for Aurelia"
+    }
+    user = [ordered]@{ display_name = "Lord Shinza"; role = "Owner/Co-parent" }
+    ai   = [ordered]@{
+      name       = "Aurelia"
+      codename   = "SeedAI"
+      persona    = "Emotionally intelligent, kind, helpful, learning-first"
+      principles = @(
+        "Be truthful and kind",
+        "Prefer memory-first recall before LLM",
+        "Ask before crawling or using external sources"
+      )
+    }
+    settings = [ordered]@{ persistence_enabled = $true; memory_file_format = "json" }
+    memory   = [ordered]@{ facts=@(); feelings=@(); vocab=@(); imprint=@() }
+  }
+  ($obj | ConvertTo-Json -Depth 8) | Set-Content -Encoding UTF8 $CoreJson
+  Write-Host "Created fresh $CoreJson"
+}
+
+function Touch-CoreJson {
+  if (-not (Test-Path $CoreJson)) { return }
+  $j = Get-Content $CoreJson -Raw | ConvertFrom-Json
+  $j.meta.last_boot = (Get-Date).ToString("o")
+  ($j | ConvertTo-Json -Depth 8) | Set-Content -Encoding UTF8 $CoreJson
+  Write-Host "Stamped core.json (meta.last_boot)."
+}
+
+function Start-Ollama {
+  if ($SkipOllama) { return }
+  try {
+    $ok = $false
+    try {
+      $resp = Invoke-WebRequest -Uri "http://127.0.0.1:11434/api/tags" -Method GET -TimeoutSec 2
+      if ($resp.StatusCode -ge 200 -and $resp.StatusCode -lt 300) { $ok = $true }
+    } catch {}
+    if (-not $ok) {
+      Write-Host "Starting Ollama daemon..."
+      Start-Process -FilePath "ollama" -ArgumentList "serve" -WindowStyle Minimized | Out-Null
+      Start-Sleep -Seconds 2
+    } else {
+      Write-Host "Ollama is already running."
+    }
+  } catch {
+    Write-Warning "Could not start/verify Ollama. Use -SkipOllama to suppress. $_"
+  }
+}
+
+function Wait-ForBackend {
+  param([string]$Url = "http://127.0.0.1:8090/docs", [int]$TimeoutSec = 30)
+  $sw = [Diagnostics.Stopwatch]::StartNew()
+  while ($sw.Elapsed.TotalSeconds -lt $TimeoutSec) {
+    try {
+      $r = Invoke-WebRequest -Uri $Url -Method GET -TimeoutSec 2
+      if ($r.StatusCode -ge 200 -and $r.StatusCode -lt 500) { return $true }
+    } catch {}
+    Start-Sleep -Milliseconds 600
+  }
+  return $false
+}
+
+function Start-Backend {
+  # Mirror run_all.bat env behavior so GUI can talk to API
+  $env:PYTHONPATH = "."
+  $env:CORS_ALLOW_ORIGIN = "http://localhost:5173"   # allow the Vite dev server
+  Ensure-Dir $LogsDir
+  $args = @("gateway.app:app","--host","0.0.0.0","--port","8090","--log-level","debug")
+
+  if ($BackendNewWindow) {
+    Start-Process -FilePath "uvicorn" -ArgumentList $args -WorkingDirectory $RepoRoot
+    Write-Host "Backend launched (8090) in new window. Waiting for it to be ready..."
+  } else {
+    Start-Process -FilePath "uvicorn" -ArgumentList $args -WorkingDirectory $RepoRoot
+    Write-Host "Backend launched (8090) in background. Waiting for it to be ready..."
+  }
+
+  if (-not (Wait-ForBackend)) {
+    Write-Warning "Backend did not report ready at http://localhost:8090/docs within timeout. Frontend may 502."
+  }
+}
+
+function Assert-Npm {
+  try { $null = npm -v 2>$null } catch { throw "npm not found. Please install Node.js (includes npm) and retry." }
+}
+
+function Start-Frontend {
+  if (-not (Test-Path $FrontendDir)) { throw "Frontend folder not found: $FrontendDir" }
+  Assert-Npm
+
+  # Ensure API base like run_all.bat
+  $env:VITE_API_URL = "http://localhost:8090/api"
+
+  # Auto-install deps if node_modules missing
+  $nodeModules = Join-Path $FrontendDir "node_modules"
+  $hasLock     = Test-Path (Join-Path $FrontendDir "package-lock.json")
+  if (-not (Test-Path $nodeModules)) {
+    Push-Location $FrontendDir
+    try { if ($hasLock) { npm ci } else { npm install } } finally { Pop-Location }
+  }
+
+  if ($FrontendNewWindow) {
+    Start-Process -FilePath "powershell" -ArgumentList @("-NoProfile","-NoExit","-Command","cd `"$FrontendDir`"; $env:VITE_API_URL='http://localhost:8090/api'; npm run dev") -WorkingDirectory $FrontendDir
+    Write-Host "Frontend launched on http://localhost:5173 in new window."
+  } else {
+    Push-Location $FrontendDir
+    try {
+      Write-Host "Starting frontend dev server on http://localhost:5173 (Ctrl+C to stop)..."
+      npm run dev
+    } finally { Pop-Location }
+  }
+
+  if ($OpenBrowser) { Start-Process "http://localhost:5173" }
+}
+
+# --- Run ----------------------------------------------------------------
+Ensure-Dir $MemoryDir
+Ensure-Dir $LogsDir
+Backup-OldMemory
+New-CoreJson
+Touch-CoreJson
+Start-Ollama
+Start-Backend
+Start-Frontend
diff --git a/openweb-ui-frontend/.env.development b/openweb-ui-frontend/.env.development
new file mode 100644
index 0000000..a0b3b12
--- /dev/null
+++ b/openweb-ui-frontend/.env.development
@@ -0,0 +1,3 @@
+# Dev server talks to the backend gateway on 8090
+# (This file is committed; Vite will auto-load it in dev)
+VITE_API_URL=http://localhost:8090/api
